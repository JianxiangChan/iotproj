// Code generated by go-bindata.
// sources:
// templates/dtdata.html
// templates/rtdata.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dtdataHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x18\x4d\x6f\x13\x49\xf6\x6c\x24\xfe\xc3\xdb\x0e\xbb\x71\x90\xbb\x1d\x27\xb0\x0a\x8e\x6d\x09\x25\x11\x64\x15\x20\xbb\x0e\x7b\x5d\x95\xbb\xaa\xed\x72\xba\xbb\x9a\xea\x72\x1c\x63\x59\x5a\xb4\xbb\xd2\x0a\x56\x2b\x31\x73\xe0\xc0\x5c\xe7\xeb\x30\xcc\x65\x84\x10\x23\x66\xfe\xcb\x88\x24\xf0\x2f\xe6\x55\x7f\xd8\xed\xaf\x90\x48\x61\xb8\x4c\x5b\x76\x55\xbd\x7e\xdf\xaf\xea\xbd\x57\xae\xb4\x94\xe7\xd6\x2e\x5f\xaa\xb4\x18\xa1\x7a\xf4\x98\x22\x60\xb7\x88\x0c\x99\xaa\x1a\x1d\xe5\x98\x6b\x86\x86\x2b\xae\x5c\x56\xdb\xe5\xc7\xaf\xbe\x3d\x7a\xfd\xd5\xc9\xf3\xa7\xc7\xff\xff\xfa\xe8\xb3\xff\xed\x6c\x6d\xbe\xfb\xf9\x8b\x93\x6f\x9e\xe8\xe5\x7f\x5f\x56\x8a\x31\xde\xe5\x4b\xb9\x4a\x68\x4b\x1e\x28\x08\xa5\x5d\x35\x5a\x4a\x05\xe5\x62\xb1\xcb\x1a\x94\x79\xc2\x72\x45\x97\xf8\x5c\x28\xcb\x16\x5e\xd1\x7b\xa0\x54\x37\x5c\x2d\x59\xed\xd0\x00\xd5\x0b\x58\xd5\x50\xec\x50\x15\xdb\xe4\x80\xc4\x3c\x8c\x5a\xa5\x18\xcf\x90\x31\xe0\x93\xf2\x76\x89\xdf\xec\x90\x26\x52\x64\x90\x27\x25\xda\x5e\x38\x2e\xb0\x1d\x16\xdb\x0f\x3a\x4c\xf6\x2c\x8f\xfb\x5a\xea\xb9\xd8\xa7\x38\x93\x24\xaa\x17\xd9\xad\x17\x8a\x34\x5c\xd6\x8f\xe6\x39\x70\x84\xaf\xcc\x90\x3f\x64\xe5\x95\xeb\xc1\xe1\x7a\x8c\x31\x88\x07\xcb\xe1\x87\x8c\x9a\x11\xbe\x19\x90\x26\xf7\x89\xe2\xc2\x07\x2b\x33\x27\x31\x23\xc8\x05\x84\x52\xee\x37\xcb\xa5\x95\xe0\x10\x4a\x6b\x93\xbc\x16\x1a\xc4\xde\xff\x87\xed\x72\x7b\xbf\x0f\x1e\x91\xc8\xc0\x54\x22\x28\xaf\x2c\x23\x26\xb4\x18\x6f\xb6\x54\xf9\x9a\x5e\x0c\x00\x2e\x5f\xca\xa0\x03\x01\x0d\xe9\xeb\x1f\x88\x9e\xc4\x0c\x8c\x82\x49\x99\x2d\x64\xa4\x49\xd9\x17\x3e\x5b\x4f\x5f\x6a\xf2\xa6\x14\x1d\x9f\x96\x17\x56\x9c\x6b\xab\xd7\x47\xaf\x6c\xe1\x0a\x59\x5e\x70\x56\xf4\x67\x7d\x92\x6b\x6a\x06\x94\xd0\x1d\xb0\xaa\x7f\x86\xb3\x21\xf2\xc8\x69\xa5\x3f\x4f\x82\x1d\xe2\x71\xb7\x57\x86\xa3\x9f\x5e\xbc\x7b\xf3\xfd\xfb\xe7\xff\x79\xff\xe3\xd3\xc2\xd1\x8b\x27\x6f\xdf\x7c\x5e\xb8\x29\x39\x71\x0b\xb7\x99\x7b\xc0\x14\xb7\x49\xe1\xef\x4c\x52\xe2\x93\x42\x48\xfc\xd0\x0c\x99\xe4\xce\x38\xaf\x6e\xec\x96\x86\x70\xe9\xc8\x32\x21\x29\x93\xa6\x24\x94\x77\xc2\xf2\x6a\x46\x7c\x3a\x22\x59\x63\x9f\x2b\x53\x49\x64\xcb\x23\xdf\x10\xd7\x05\x97\xfb\x8c\x48\x58\xb6\x56\x97\xc3\x21\x8d\xe9\x89\x87\x67\x42\x3c\x0b\x4e\x3a\x0e\x92\xc9\x58\x10\xcb\x2d\x71\xc0\x24\xf4\xc7\x42\xb3\xba\x76\xdd\xb9\x81\xa1\x19\xc0\x70\xdb\x26\x1b\x55\xaf\x2b\x7f\x30\x4d\xd8\xb8\xf7\xb7\x2d\xd8\xa8\xd7\x4d\x33\xda\xbe\x11\x1c\xa5\xef\x43\x4b\x32\xe7\xd4\x83\x84\x80\xa2\x1d\x86\x45\x8f\x28\xa6\x1d\x8f\xf1\x8a\x8e\x14\xc2\xc6\x4e\x72\xb4\x96\xcc\xad\x1a\x91\xf0\xb0\xc5\x18\x1e\x53\x8f\x51\x4e\x10\x64\x4b\xc6\xfc\x42\x20\x45\x9b\xd9\xda\xfc\xf8\x84\x9d\x53\x85\x88\xf1\xc5\x09\x8f\xfc\xd2\x09\x95\xf0\x58\xe2\x9a\xd4\xf9\xe7\xd4\xcb\x8e\x98\x24\xc3\x85\xe9\x17\x7f\x33\x31\xdc\xbe\xbb\xb1\x73\x7f\x73\x6b\x13\x76\x77\xee\xdf\xda\xbe\xab\x75\x86\x7b\x77\x61\xef\xf6\x76\x1d\x76\x6f\xde\xda\x82\x24\xb8\xe7\xd0\x1e\xb3\x64\xe0\x76\x30\x8b\xe0\x28\x79\xe8\xc5\xbf\xbf\x75\x6c\xb3\x5a\x30\xe9\x20\x17\x13\x99\x0a\xd7\x6d\x10\x39\x0d\xf9\x84\xda\x51\xa2\x48\x9c\xc8\xe3\xc0\x27\x15\x46\x83\xf7\x22\xe8\xa7\x38\x19\x19\xfd\x74\x49\x57\x3c\x54\x66\x7b\x34\xbf\x20\x95\xb0\x3b\x28\xa6\xed\x43\x43\xd0\x5e\x36\xb9\xd4\x15\x8a\x82\x5d\x2c\xa2\xb0\x23\x88\x4e\xfc\xc3\xad\x48\xf9\x01\x70\x5a\x35\x5c\x84\x63\xbe\xed\x4a\x12\x60\x40\xd3\xfa\x3a\x85\xa0\xab\x34\x42\x6a\x00\xd9\x4c\x98\xa0\xd9\x2e\x09\xc3\x21\xab\x30\xd6\x0d\x92\xd1\x74\x99\xa3\x52\xf2\x73\x90\x49\x5d\x1b\xb2\x74\x99\x99\xb6\x6d\xcb\xa7\x33\x2c\x8b\x3f\x95\x56\x09\x22\xff\x55\x8d\x51\x2d\x5b\xd5\xd5\x37\xae\x8e\x0d\x17\x93\xb4\x01\xb5\x3f\xf9\x8d\x30\x58\xef\xf7\x2d\x8f\xd8\x83\x01\xfa\xb1\x14\xb1\xc8\x55\x62\x49\xb9\x1c\x54\xa2\x4d\x15\x39\x62\xb4\xc7\x90\x9f\x17\xb8\xcc\x48\x2d\xa0\x3c\x0c\x5c\xd2\xc3\x35\x73\xdd\x30\x20\x36\xaa\x53\x35\x96\x0d\x80\x2e\xa7\xaa\x55\x35\x6e\xac\xfd\x11\xa5\x69\x86\x39\x98\x7e\x2a\x2a\x89\xdf\x8c\x77\x09\x82\x3c\xe5\x6d\xc2\xa2\xb6\xbd\x89\xfd\x5f\xeb\x0c\x88\x77\x88\x1d\x61\x66\xc2\x38\x1f\x39\xee\x38\xcf\xc8\x19\xfb\xd1\x93\xc7\x2f\x8f\xff\xf9\x28\xc1\xcf\x4d\x18\xac\x71\xde\xbe\x7a\x7c\xfc\xf8\xcb\xe3\x67\x2f\xdf\x3f\xfb\xe1\x03\x6c\xf1\xf5\x3c\xc3\x35\xe5\x1c\xa7\xcd\x21\x50\x8e\x10\xea\x77\x27\x4f\xb3\x3c\xd5\xc9\x89\xd3\x50\x44\x45\xe9\xec\x12\x9d\x04\x9d\x8e\x3a\x9e\x31\x93\xaa\xdf\xc7\x4e\x0a\x4f\xa5\xe5\x62\x8a\x1b\x60\x77\x3c\xa1\x9b\x4c\x34\x46\x7e\xb4\x86\x27\x6f\x9b\xea\x83\xa7\xe8\x04\xf8\x4e\x7c\x20\xa7\xe0\x7b\xcc\xc3\x34\x45\x54\x47\xb2\xc1\x00\x7e\xf9\xf7\xbf\xb2\x38\xfd\x3e\x77\xc0\xda\x61\x34\x92\x9b\x52\x55\x74\x0a\x88\xdb\xe2\xea\x62\x53\x67\xd0\xc5\x1a\x5e\x18\xa4\xf0\x9b\xb5\xb7\xaf\x5f\x44\x4d\x59\xb4\xa8\x14\x35\x66\x2d\xe5\x38\x6d\x19\x73\x43\x36\x65\x52\x6c\xd6\x84\x18\xc9\xe8\x48\xc8\xc9\xa3\xef\xce\x21\xc3\xa7\xf3\x44\x80\x76\xc0\x86\x64\xd8\xef\x6d\xe2\x77\xe4\x9f\x19\xe1\xcc\xcd\xe6\x8a\x1e\x29\xaa\xa4\x4a\x44\x73\x9d\xce\xa2\xfb\x62\x92\x5c\xe3\xe2\x91\xee\xd9\x28\xd1\xb6\xff\xaa\x6b\x29\xec\xf0\x86\x24\x38\x26\x05\x64\x74\x4f\x9b\x7d\x69\xfc\xe0\x3d\x70\xa2\x42\xc6\x15\xdb\x2c\x59\xa5\x92\xb5\x32\x7d\x35\x1c\xd7\x29\xd3\xf2\x42\x3b\xbc\x60\x8d\x26\xfb\xe9\x59\x57\x54\xd4\x21\x6a\xc8\x3e\x92\x33\xb2\x2d\xdf\x1c\xf1\xc3\xae\xeb\x63\xa9\x70\x86\x7e\xef\x14\xef\x40\xa6\x23\xfb\x58\x5b\x26\xdb\xf4\xb5\xe7\xf5\x7c\xa7\xfc\xc1\x70\xf1\x5a\x64\xe6\x66\xcc\x6e\xee\xee\x89\xa9\xf1\x35\x60\x9b\xa6\x2f\x3a\xf5\x80\xd9\xdc\xe1\x36\xfc\xa5\x8e\x59\x84\xa2\xdb\x1c\x21\x61\x37\xc2\x83\x3a\x53\x0a\x9b\x8a\x8b\xde\xea\xa9\x16\xa7\x04\x32\xbe\x3b\x8d\xac\x41\x75\x6f\x52\x0a\x3d\xd1\x91\x20\xba\x3e\x60\x19\x46\xe5\x63\x2c\x54\xfd\x82\x15\x9c\x94\x3e\xa6\x62\xee\xc3\x72\x32\x25\xaa\x78\xb5\xde\x12\x5d\x60\xbe\x92\x1c\x9d\x8b\x9d\x66\x7c\x73\x6f\x71\xca\xae\x16\x93\x7a\xa1\x87\x2b\x79\x63\x61\xba\xd7\x5b\x1a\x6d\xac\x7c\x3f\xc6\x36\x1a\x75\x21\x95\x51\x06\x87\x60\x61\x28\x40\xb6\xd2\x0f\x96\xd6\x47\x8b\x2b\x79\x2a\xec\x8e\x87\xa2\x97\x2c\x4c\xdf\xb4\x97\x77\x3a\x7e\xd4\xe5\xe6\x97\xfa\xe3\x45\x14\x85\x5b\x54\x8a\x80\xa2\x6f\x4d\x1b\x4b\x05\x12\x59\x21\x73\xf5\xc1\x4b\xe1\xe0\x72\x54\x07\x89\xc1\x88\x4c\x30\x0a\x30\xe2\x07\xfd\xe9\xaa\x7c\x40\x24\xc6\x89\x28\xa8\xe2\xc0\xc3\xf5\x69\x8c\x90\xa9\x3d\xee\x31\xd1\x51\xf3\x55\xd3\x0f\x77\xf2\x57\xf2\x9a\xd5\x92\x15\x10\x89\xba\xe5\x97\xac\x16\x09\x37\x74\x1f\x9c\x5f\x24\x48\x78\xc0\x16\x97\x66\x51\x8e\x0c\x9c\x20\x97\xcc\x13\x07\x6c\x82\xc3\x0c\x15\xe7\x32\xd0\x01\xcc\xcf\xa2\x18\xcc\x00\x15\x4a\xcb\xcb\x93\xb8\x63\xb1\x1a\x2e\x32\x1b\xad\x52\x4c\x4a\x26\xde\x10\x92\x3f\x6c\xe3\xc9\xaf\x01\x00\x00\xff\xff\x4a\xbf\x4f\x3d\xc0\x15\x00\x00")

func dtdataHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dtdataHtml,
		"dtdata.html",
	)
}

func dtdataHtml() (*asset, error) {
	bytes, err := dtdataHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dtdata.html", size: 5568, mode: os.FileMode(438), modTime: time.Unix(1497689345, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rtdataHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x6d\x6f\x1b\xc7\xf1\x7f\xad\x00\xfe\x0e\x9b\xfd\xfb\x0f\x1e\x43\xf1\xce\x72\x1b\xa0\xa0\x48\x06\xae\xad\xc4\x2a\x24\xdb\x8d\x9c\x17\x45\x53\x14\xa7\xbb\x25\x79\xd4\x3d\x30\x7b\x4b\x4b\xb4\x21\xa0\x69\x9c\xc4\x7d\xb0\x8d\xa6\x4d\x0c\xc4\x69\xd1\x14\x69\xdc\xa7\xd8\x06\x92\xb8\x49\x6c\x27\xdf\xa5\x30\x29\xfb\x5b\x74\x66\xf7\x8e\xbc\x3b\xde\x49\x94\x22\xb7\x6f\x7a\x86\xc9\xe3\xee\xec\xcc\x6f\x1e\x76\x76\x76\x57\xf5\x8e\xf0\xdc\xe6\x91\x67\xea\x1d\x66\xda\xf0\x4d\xe0\xa9\x7b\x4c\x98\xc4\xea\x98\x3c\x64\xa2\x41\xfb\xa2\x55\xfd\x1e\x8d\xfb\x84\x23\x5c\xd6\x3c\xe7\x8c\xbe\xf8\xeb\xf0\xab\x8f\x77\x6e\xfe\x66\x74\xed\xd6\xf0\x9d\x5f\xaf\x2c\x9d\x7a\xfc\xcd\x07\x3b\x7f\xf9\x15\xfe\xbc\x72\xaf\x6e\x28\xba\x68\x50\x68\x71\xa7\x27\x48\xc8\xad\x06\xed\x08\xd1\xab\x19\xc6\x26\x5b\xb7\x99\x17\xe8\x6e\xb0\x69\xfa\x4e\x20\x74\x2b\xf0\x0c\xef\x35\x21\x36\xc3\xef\x2c\xe8\xdd\x90\x12\x31\xe8\xb1\x06\x15\x6c\x4b\x18\x5d\xf3\x82\xa9\x78\xd0\x66\xdd\x50\x6f\xfb\xe7\xdd\x17\x8e\xeb\x88\xc1\x8c\xcc\xe7\x48\xfd\xd9\x6a\x95\x9c\x3c\xfb\xf2\x12\x39\xb9\xb6\x56\xad\x4a\x81\xf8\xbf\xee\x3a\xfe\x06\xe9\x70\xd6\x4a\x4a\xb4\xbc\x30\x2d\x10\x1a\x0c\x2b\x0c\x0d\xcf\x14\x8c\x3b\xa6\xeb\x5c\x64\x3a\xfc\x4e\xc9\x96\xbf\x39\x73\x1b\x34\x14\x03\x97\x85\x1d\xc6\x04\x25\x1e\xb3\x1d\x13\x9a\x2c\xce\x98\x3f\xdf\xe3\x41\x97\x59\xc2\x09\x7c\xe5\x84\x7d\x8a\x97\x8c\x0f\x47\xb0\xb4\x47\x3f\x14\x81\xc7\x22\x93\xa0\x07\x0e\x80\xc9\x92\x4c\xa2\xaf\x43\xc1\xa6\xfe\xe3\xbf\x08\xe7\xf2\x99\x93\x2b\xaf\x9c\x5a\x3a\x45\xce\xad\xbc\xf2\xd2\xf2\x19\xc4\x4b\xce\x9e\x21\xe7\x4f\x2f\xaf\x91\x73\x27\x5e\x5a\x22\x91\x43\xf7\x81\xbc\x1b\x1a\x3d\xb7\xdf\x76\x7c\xf8\xe6\x4e\xe8\xa9\xcf\xff\xb4\x4f\x93\x28\x18\x6f\x01\x97\x2a\x30\x0d\x5c\x77\xdd\xe4\xd3\x2d\x87\x80\x4e\x9a\x33\x85\x30\x01\xc1\x36\x85\x59\x15\xe6\x3a\x70\x92\x9e\xed\xbe\xd6\x67\x7c\xa0\x63\xf3\x79\xd9\xaa\x7b\x8e\xff\xad\x41\x48\x5f\x49\x1c\x05\x30\x22\xb1\x3e\x0b\x25\x16\x23\x7e\xf9\xd6\x92\x21\xbe\x55\xa0\xd4\x25\x7d\x94\x74\xf0\x91\xfc\xc9\xa5\x49\x03\x3e\xad\xc0\x07\xe3\xc3\x4c\xaf\x91\xe3\xcf\xf7\xb6\x16\x27\xbd\xdb\x51\xba\x32\x92\x7c\xe2\xe4\xe5\x9a\x7e\xbb\x6f\xb6\x01\x64\x22\x19\x65\x53\xda\x54\x34\x74\xc7\x7a\xa3\x8d\x21\xab\x15\xe5\xc6\x5c\xf6\x09\x55\x2e\x98\x9c\x38\xa4\x41\x8e\x25\xf0\x6e\x3a\xbe\x1d\x6c\xea\x81\xef\x06\xa6\x0d\x7d\xad\xbe\x2f\x4d\x42\xb4\x72\x56\x69\xab\xc3\xac\x0d\xad\xbc\x98\x6e\x35\x0c\x2b\xf0\xc3\x00\x7c\xe0\x06\x6d\x8d\x56\xb3\x4f\xd3\xa2\x38\x64\x6e\x6e\x0e\x56\x99\x55\x48\xfc\x4b\x3e\xac\x19\x03\xed\xd2\x25\x1d\x97\x81\xed\xed\x2c\x43\x60\xe7\x2b\xb7\x9c\x0f\xda\x6d\x97\xe5\x48\x24\xc0\x6a\xd9\x87\x74\x7b\xc1\x74\x35\x1a\xe1\xa2\xf3\x74\xe1\x18\x3c\xb4\x3c\xed\x0e\xe9\xb3\x58\xb3\x88\x3e\xab\xde\x51\xdd\xec\x9a\x5b\x5a\xa6\x15\x9f\x3e\x77\x6b\x84\x1a\xd2\x07\x5c\x60\xcc\xd3\xf9\x69\x2a\x8c\xbe\x1a\x29\xf5\x82\x50\x94\x72\xba\xe5\x54\x51\x24\xdd\x30\xf0\xf3\x48\x40\x73\xc1\x7c\x11\x51\x99\xbd\x9e\xeb\x58\x26\x42\x36\x70\xc4\x62\xbc\x52\xcb\x85\x3a\x77\xbc\x09\xaa\xd5\x48\xcb\x74\x43\x96\xd3\x6d\x86\x03\xdf\x2a\xee\x0e\xfb\x96\xc5\xc2\xb0\x96\x08\x01\xc4\x3c\x65\xa7\xb1\xbd\x34\xfa\x7f\x38\xa1\xfa\x1e\x2d\xeb\xcc\xeb\x81\x4f\xb3\x9e\x8a\x1f\xa7\xa5\x78\x91\x67\x1b\xc4\xef\xbb\x6e\x21\x4f\x49\x8c\x11\x5a\xdc\x6d\x18\xc3\xaf\xff\xb6\x73\xed\xce\x93\xd7\xaf\x0e\xaf\xbd\x85\x86\x19\xbd\x7b\x77\xe7\xfe\xe5\xd1\x1f\x1f\x0c\x1f\x5c\xdf\x79\xff\x32\xfc\x1c\x5d\xbd\x5d\xcc\x00\x67\x41\x28\x38\x48\xa1\x54\x05\x26\x3c\xc9\x18\x46\xa4\xba\xcb\xfc\xb6\xe8\x94\x0b\x09\x8a\x54\x95\x96\xd1\x19\x78\x42\x92\xcd\x27\xac\x09\x33\x8d\x6d\xcd\x13\x47\x30\x6f\x57\x03\xc4\x16\x73\x48\x9d\x24\xb1\xec\x35\x06\x1f\x54\xac\x02\x9a\xd5\x05\x6f\xd6\x85\x0d\x4e\x77\x9d\xb6\xdf\x28\x59\x0c\xa7\x4b\x89\x38\x76\xa3\xe4\x99\x16\x25\x15\xb0\x73\x85\xd0\x52\x53\xbe\x02\x24\x1d\x9a\xb1\x05\x4a\x3a\xbb\x49\x77\xd1\x6e\x5a\x54\xbe\x18\xe0\x09\xcb\x94\x29\xfa\x9c\xe5\x89\x4b\x74\x63\x0f\xf9\xd7\xe5\x37\xc6\xa2\xe7\xa2\x67\xf2\x26\xed\x81\xc3\x5c\x06\x59\xaa\x41\x04\xef\xb3\x99\x0c\x92\x42\x8a\xfc\xf3\xe0\xca\x5c\x0d\x3f\x03\x37\xe0\xb5\x36\x2e\x0e\x8b\x32\xc3\x6f\x32\xa7\xdd\x11\xb5\xf5\xc0\xb5\x95\x4e\x20\x3d\xa1\xcb\xa3\xaf\x6e\xcf\x6c\xad\x6d\xc2\x60\xda\x3d\x1d\xc4\x9c\xd9\x33\xe1\xdd\x79\xfd\x93\x7d\xe0\xcd\x73\x43\x84\x6b\x17\xa7\x3b\x5e\xca\xdb\xb3\xa8\x8b\x13\x12\xc7\xa9\x49\xe9\xb3\x4d\x72\x0a\x4a\x69\xe5\x6e\x58\xa9\xe1\xfd\xa7\x30\x0d\x58\x59\x7f\x31\xe0\x50\x64\x6b\x74\x00\x8f\xb1\xba\x6a\xd8\x36\xe9\x74\x6a\x9e\x57\x83\xc5\x7e\xb7\xf9\x98\xb1\x6a\x24\x2b\x37\xce\x0e\x10\x2a\x4a\xf1\xa0\xc7\xfc\x84\xe2\xa4\x6e\x92\xc0\xb7\x20\x81\x6f\xa8\x3e\xf0\x84\xf6\x2a\xa5\x95\x78\xaa\x55\xe8\xab\xb4\x5c\x6a\x8e\x7e\xf1\xdb\xe1\x83\x9f\xd5\x0d\xb3\x39\x15\xfc\x07\x86\x62\xb9\x41\xc8\x8a\xb0\xc8\xce\x02\x30\xc3\x37\x3f\x7d\x72\xe3\x93\x5c\x30\xfb\x48\x07\x31\xdc\x34\xda\x26\x80\x90\xe5\x5c\xc9\x96\x2b\xe8\x0b\x20\xb6\x91\xcd\x3d\xa5\xe6\xe3\x3b\x1f\x8f\xde\x78\x73\x0c\x01\x3e\xf8\x2c\x41\xe4\x54\x2a\x7b\xf8\x7f\xbb\xb8\x7b\xaa\x02\x49\x3e\x86\x61\xba\x8c\x0b\x0d\xd4\xdb\x35\xe5\x27\x17\x43\xdc\x6b\xef\x36\xa0\x00\xcb\x5e\x09\x42\x01\xa1\x8c\xf3\x80\x17\xc6\x7b\x0e\xef\xed\xcc\x62\xbf\x5d\x50\x20\x19\x72\x5f\x4e\x86\x57\xfe\x39\x7a\xef\xee\x93\x0f\x3f\x7f\xf2\xfb\x3f\xe1\x72\xfa\xde\x97\xa3\x4f\xdf\x9d\x50\xe1\xdc\xd4\xa1\x74\x16\x01\x16\x3c\xd1\x9c\x4c\x15\x8e\x2d\x4f\x40\x6a\x46\xcb\xf5\x45\x07\x42\x13\xca\x6e\xe7\xe2\x45\x92\x06\x81\x93\x3e\x80\x61\x39\xfa\xd2\xd5\x0a\xad\x11\xd1\x71\x42\xbd\x0d\x25\x23\x24\xb6\x0e\x54\x6b\x15\xb2\x30\x0f\x3c\x47\x1f\x5c\x79\x74\xff\x61\xce\x20\x3b\x39\x48\x26\x90\xb2\xa4\xbf\xf1\xe7\x1c\xe2\x4e\x92\xf8\x74\xd0\xe7\xa1\xa2\x1e\xde\xbd\x3e\xba\x71\x2f\x67\x80\x97\x82\xe4\xf8\x7d\xc1\xe2\x21\x57\xde\xca\xa1\x0f\x93\xf4\x6b\x0c\xaa\x07\x3b\xa2\xdf\xb9\xf5\x4e\x0e\xfd\x5a\x8a\xbd\xeb\x3a\x61\x3c\x06\x75\xb8\xf3\xf7\xa9\x51\xdb\x19\xff\xe3\x02\x69\x68\x83\x4a\xd9\x80\x95\x35\x14\xd2\x09\x65\x02\x9f\xe8\x1a\x4f\xe8\x9c\xf5\x5c\xd3\x62\xda\xcb\xac\xbd\xb4\xd5\xd3\x8f\x82\x31\xb5\x58\xe0\x8b\x50\x92\xfd\x88\x99\x5c\x5a\x99\x42\x00\x87\xfd\x75\x08\x5f\xed\xbb\xa4\x4a\xc6\xf4\x71\x15\x92\x1f\x78\xad\x80\x13\x0d\x7d\xba\x41\x1c\x9f\x04\xe5\x69\x1a\x04\x88\xb9\x5d\x31\xd4\xa8\x86\x93\x7f\x03\x05\x96\x41\xe2\xcc\x98\xb3\x78\xb0\x18\x58\x28\x93\x17\x88\x16\xfc\x78\xe3\x27\x65\x52\x23\x9a\x46\x61\x13\x00\x8c\x65\x43\xac\x8b\x46\x27\x4d\xb1\x26\x59\x55\x38\x83\x6a\xc4\x47\xd1\xe9\x09\xa2\x16\x88\x71\x80\xc7\xe9\x1c\x92\x56\xf9\x92\x4c\x91\x7b\xef\x1d\x70\x8c\x4a\x79\x15\xf8\x2c\xde\x3d\x80\x37\xf6\xd8\x3c\x04\x96\x60\xb0\xf7\x14\xb0\x30\x7a\xfb\xdb\x44\x24\x47\xfe\x37\x37\x13\x33\xd7\xd3\xb9\x89\x6b\x6e\x6e\xda\x23\xe3\x45\x6d\x3f\x2e\x91\x83\xfe\xe7\x93\x43\xf5\x49\xdc\x3a\x96\xc0\x45\xbf\x87\xc5\x9b\xe6\x06\x96\xe9\x46\xa2\xc6\xc9\xa2\x2b\x0f\x23\xe0\xab\x4e\x1c\xf8\xaa\x54\x72\x4b\x7a\xcc\x1c\x72\xb8\x2c\x13\x60\xbe\xdb\x81\xd5\xf7\xc0\x9e\x98\xbb\x96\x5c\x86\xaf\xdf\x1f\x2c\xdb\x1a\x8d\x76\x36\xdd\xb2\xee\xf8\x3e\xe3\xa7\xcf\xaf\xae\x4c\xb4\x8b\xbe\x0a\x07\x67\xf6\x2b\x49\x26\x00\x53\x01\x48\x6f\x5a\x4a\xb8\x69\x29\x2d\x8e\xf9\x67\x81\xa7\xc1\xcf\xba\x73\x29\x04\x18\x15\xf3\x19\x60\x14\x76\x21\xbb\x15\xf4\x33\xb0\x8b\x8e\x8e\xb1\x8e\x44\x86\xb2\x94\x2c\x62\x79\xc0\xda\x65\xbf\x4a\xc1\x56\xe5\x70\x95\x82\x3d\xd2\xfe\x54\xca\xa7\xcd\x6f\x8d\x77\x30\xc7\x93\xfb\x97\x83\xed\x57\x8a\xc3\x33\xda\x59\x65\x2c\x25\xc5\x16\xf0\x5a\x87\xac\xb2\x91\x37\x87\x33\x53\x38\xb5\xd8\x1d\x79\xc6\x78\xee\xf1\x37\xbf\x1b\xde\xfc\xc3\xa3\x2f\x7e\x39\xfa\xc7\x87\xa3\xcf\xaf\x3f\xbe\x75\xe5\xd1\xc3\xab\x3b\x0f\x6f\x3f\x67\x1c\x79\xe6\xa8\x96\x39\x22\x9c\x9c\xa7\x44\x67\x89\x18\xee\xd8\xaf\x63\xbd\x0f\xe2\x55\x27\x7c\x46\x6b\xb1\xe3\xb7\xb1\x3a\xd6\x5d\x33\x14\xcb\x78\x26\x72\xb6\xa5\x51\x83\xca\x12\x0f\xcd\x82\x53\xe6\x28\x78\x2e\xd8\x70\x98\x2c\xa3\xa5\x18\x94\x4c\xb1\xb2\x9e\x5f\x0f\xec\x01\x94\x0c\xa6\xef\xe0\x95\x8b\x76\x89\xa8\x53\xf0\xf3\x41\xaf\x46\x52\xe3\x20\x59\x11\x3c\x12\x44\xa6\xa0\x59\x1c\xa3\xf0\xba\x5d\x56\x0c\x15\x62\x08\x16\xc9\x21\xad\x19\x79\x0a\xaa\xc9\x40\x09\x7a\x30\xe6\xa8\x16\x7b\x3a\x96\x0e\xf8\xe5\x01\x5a\x52\x85\x79\xa4\x9e\x07\x2c\x3d\x53\x74\x60\xe9\x30\x4a\x2a\xe1\x46\x95\x4a\x4a\xdb\x45\xa5\xd6\xee\xde\x43\x27\x27\x4e\x8f\xeb\x46\x74\x1f\x58\x47\xa3\x36\x53\x37\x2b\x6b\xc2\xe4\x82\x9c\x33\xdb\x8c\xac\x04\xa6\x0d\xaa\x8d\xef\x52\x6c\xe7\x02\xee\x34\x29\x9e\x19\x33\x5e\xdd\xe4\xb0\xa4\x31\x3e\x39\x6a\xce\x10\xe0\x81\x35\xb4\x34\xb3\x93\x48\x92\x59\x60\xab\x70\xcc\x2a\x54\x27\xbf\x24\xfa\xae\xba\xac\x25\xe2\xe1\xfb\x18\xc6\xf1\x1c\x24\x39\x2e\xf1\x86\xba\x2d\xf9\x76\x8e\x66\x75\x75\xd6\xbf\xe9\xd8\xa2\xd3\xc0\xc3\xe4\xff\xa7\xd1\x2e\x96\xaa\x5d\xec\xe4\x76\x94\x27\x8e\xd5\x27\x9b\xdd\x31\x59\xbd\xb3\x10\x6d\xcf\xe9\xe4\xaa\xe0\xf9\x63\xbd\xad\x45\xb5\x5b\x5f\x87\xba\x76\x23\xcb\x3c\x16\x7c\xfc\x18\x10\xd2\x19\xee\x5e\x3b\x0b\x6a\x97\x1c\xbb\x55\xa2\x42\xa7\x4a\x3d\x22\x6f\xd6\x27\xa6\x8b\xf4\x8b\x4c\x87\xe1\xda\x83\x35\x09\xaf\x50\x17\x68\x4a\x9f\xc4\x25\xf1\xb4\xba\x11\x49\xf3\xf1\xed\xaf\x87\x1f\xbd\xbd\x7a\xe2\x24\xc8\xeb\xe4\xf4\x2b\xf4\x05\x9d\xa0\x8b\xec\x21\xd9\x94\x2a\x47\xde\xb8\xf7\xe4\xc6\x67\x05\x23\x77\x7e\xfe\xe5\xf0\xed\xfb\xea\xdc\x24\xe6\x52\x44\xa5\x0e\x34\x8a\xa9\x46\x37\x3f\x1b\x7e\xf4\x7e\xa6\x33\xb2\x63\xe2\xe7\x94\x39\x70\xb2\xc8\xf8\x8e\xb6\xfc\x69\xf2\x68\x2a\x45\xbf\x22\x57\x64\x02\xb0\xfb\x43\xbc\x4c\x20\x2b\xce\x3a\x37\xe1\x3b\x9a\x58\x93\xab\x9c\xfc\x7b\xeb\x3d\xaf\x8a\x32\x17\x87\xea\xda\xa8\xba\xa0\x2f\x2c\xe8\xc7\xa7\x6f\x8f\xc8\xd8\xfa\x88\x29\x71\x7f\x4d\xba\xe1\x21\x23\x4a\x5e\x8e\xe7\xdd\x60\x81\x7c\x79\xcb\xfa\x94\x0c\x91\xbc\xc7\x2d\x10\x3f\xbe\x4a\x7d\x5a\x10\x66\xb8\xc4\x2d\xba\xdf\xc3\x88\x49\xdc\xc0\x3e\xad\x70\x49\x5e\xf2\x76\x8b\xee\x78\x77\xb9\x7f\x3c\x7c\x14\x89\xf7\xaa\x62\x57\x18\x3d\x6a\x34\x74\x13\x58\xba\xf0\x2f\x17\xd6\x7a\xcc\x72\x5a\x8e\x45\x7e\xb0\x06\x1b\x30\x1b\xcc\x86\xfb\x8e\x73\x92\x8e\xac\x31\x21\x20\xef\x1f\x76\x98\x4f\x50\xe4\x82\x54\x7f\x08\x31\xd1\x04\xa0\x9e\x80\xa2\x70\x10\xf4\x39\x09\x36\x7d\x02\x99\x06\x80\x2b\x2a\x80\x7d\xc8\xe0\xb2\xd2\x0f\xe4\xc7\x44\x60\xa8\xda\x23\x93\x52\x30\xd3\x45\x09\x10\x16\x28\xfc\xa3\xa3\x7f\x07\x00\x00\xff\xff\x12\xf3\x41\xb6\x7b\x24\x00\x00")

func rtdataHtmlBytes() ([]byte, error) {
	return bindataRead(
		_rtdataHtml,
		"rtdata.html",
	)
}

func rtdataHtml() (*asset, error) {
	bytes, err := rtdataHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rtdata.html", size: 9339, mode: os.FileMode(438), modTime: time.Unix(1497689345, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dtdata.html": dtdataHtml,
	"rtdata.html": rtdataHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dtdata.html": &bintree{dtdataHtml, map[string]*bintree{}},
	"rtdata.html": &bintree{rtdataHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

