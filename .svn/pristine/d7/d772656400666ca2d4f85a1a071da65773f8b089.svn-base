package dataserver

import (
	_ "encoding/json"
	"monitor/backend"
	"monitor/packets"
	_ "time"

	log "github.com/Sirupsen/logrus"
	"github.com/robfig/cron"
)

//上报周期
const (
	//	SPEC_UP_LEVEL string = "@every 1m"  //1分钟上报一次
	SPEC_UP_LEVEL string = "@every 10s" //1分钟上报一次
)

type DataServer struct {
	mqtt *backend.Backend
	cron *cron.Cron
	mac  string  //Pi 板子Mac地址
	temp float64 //Pi温度
	led  bool    //LED关闭状态 = true le is open / = false led is close
}

func NewDataServer(mqtt *backend.Backend, mac string) *DataServer {
	c := cron.New()
	server := &DataServer{
		mqtt: mqtt,
		cron: c,
		mac:  mac,
		temp: 0.0,
		led:  false,
	}

	c.AddFunc(SPEC_UP_LEVEL, server.handleTempPacket)
	return server
}

func (s *DataServer) Start() {
	go func() {
		for rxPayload := range s.mqtt.RxDataChan() {
			s.handleLedPacket(rxPayload)
		}
	}()
	s.cron.Start()
	log.Info("DataServer start")
}

func (s *DataServer) Stop() {
	s.cron.Stop()
	log.Info("DataServer stop")
}

//处理下行控制数据帧
func (s *DataServer) handleLedPacket(pkt packets.LedPacket) {
	log.Info("handleLedPacket LedPkt = ", pkt)
	s.led = pkt.LED
	//TODO 控制灯
	//???????
}

//处理上线状态数据帧
func (s *DataServer) handleTempPacket() {
	log.Info("handleTempPacket")
	//TODO 采集温度和灯状态
	//???????
	var tempPkt packets.TempPacket
	tempPkt.LED = s.led
	tempPkt.Mac = s.mac
	tempPkt.Temperature = s.temp
	err := s.mqtt.PublishTempPacket(tempPkt)
	if err != nil {
		log.Error("handleTempPacket error: ", err)
	}
}
