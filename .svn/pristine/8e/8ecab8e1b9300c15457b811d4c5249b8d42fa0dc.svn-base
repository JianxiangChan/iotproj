// Code generated by go-bindata.
// sources:
// templates/dtdata.html
// templates/rtdata.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dtdataHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x5f\x6f\x1b\xb9\x11\x7f\x56\x80\x7c\x07\x76\x93\xd6\xf2\x41\xbb\xb2\xec\x4b\x6b\xcb\x92\x80\xc0\x36\xee\x5c\xf8\x72\x6e\xe5\xeb\x6b\x41\x2d\xb9\x5a\xca\xdc\xe5\x86\xcb\xb5\xac\x13\x04\x34\x68\x0b\x14\x49\x51\x20\xed\x43\x1e\xd2\xd7\xfe\x7b\x68\xfa\x52\x04\x41\x8a\xb4\xdf\xa5\x88\xed\xe4\x5b\x74\xc8\xdd\x95\x56\xff\x1c\x1b\x70\x9a\x97\x5b\x41\x22\x39\x3b\xf3\x9b\xe1\x90\x9c\x19\xaa\xe1\xab\x80\xb7\x6e\xdf\x6a\xf8\x14\x13\xdd\x06\x54\x61\xe4\xfa\x58\xc6\x54\x35\xad\x44\x79\xf6\xa6\xa5\xe9\x8a\x29\x4e\x5b\x87\xec\xfc\xd5\xdf\xce\x5e\xff\xf9\xe2\xf9\xd3\xf3\xdf\xfd\xe5\xec\xf7\xbf\x3d\xd8\xdb\x7d\xf7\x9f\x3f\x5e\xfc\xf5\x89\x1e\xfe\xe6\x65\xa3\x9a\xf2\xdd\xbe\x85\x1a\xb1\x2b\x59\xa4\x50\x2c\xdd\xa6\xe5\x2b\x15\xd5\xab\xd5\x08\x87\x03\x16\x76\x07\x49\xe8\x3c\x64\x21\x4b\x48\xe8\xb8\x22\xa8\x06\x0f\x95\xea\xc7\x1b\x35\xa7\x17\x5b\x48\x0d\x22\xda\xb4\x14\x3d\x55\xd5\x1e\x3e\xc1\x29\x8a\xd5\x6a\x54\xd3\x1e\x40\x97\x16\x41\x0b\xf6\x23\x2e\xfc\xad\xad\x9e\xd3\x39\x56\x8e\xcb\x45\x42\x32\xf4\x44\x31\xce\xd4\xe0\x8a\xe0\x08\x9e\x1c\x9f\xe3\xb0\x9b\xe0\x2e\x48\x14\x98\xa7\xb4\xf6\x69\xc7\x0d\x62\x87\x8b\x3e\x0e\x99\x50\x46\x5f\x2f\xae\xf6\x1e\x26\x54\x0e\x9c\x80\x85\x5a\xeb\xb5\xe0\x73\x9e\x59\x11\x35\x48\xdd\x0a\x8f\xc2\x1d\x4e\x87\xa6\x5f\x42\x9e\x08\x95\x1d\xb3\x6f\x69\x7d\xfd\x5e\x74\xba\x9d\x72\x8c\xd2\xc6\xf1\xd8\x29\x25\xb6\xe1\xb7\x23\xdc\x65\x21\x56\x4c\x84\xc8\x29\xf4\x71\x0a\x84\x4a\x11\x26\x04\xd6\xa6\x5e\x5b\x8f\x4e\x51\x6d\x73\x16\xeb\x4e\x07\xbb\xc7\x3f\x77\x39\x73\x8f\x87\x28\xc0\x12\x00\x6c\x25\xa2\xfa\xfa\x1a\x70\x22\x9f\xb2\xae\xaf\xea\x9f\xeb\xc1\x08\xa1\xdb\xb7\x0a\xec\x08\x23\x4d\x19\xea\x1f\x64\x9e\x6c\x1a\xb0\x0a\x36\xa1\xae\x90\xc6\x92\x7a\x28\x42\xba\x9d\xbf\xd4\xe2\x5d\x29\x92\x90\xd4\xef\xac\x7b\x9f\x6f\xdc\x9b\xbc\x72\x05\x17\xb2\x7e\xc7\x5b\xd7\x9f\xed\x59\xd4\x7c\x1a\xa8\x06\xee\x40\x1b\xfa\x67\xdc\x1b\x33\x4f\x9c\x56\xfb\xe1\x2c\xd9\xc3\x01\xe3\x83\x3a\x3a\xfb\xf7\x8b\x77\x6f\xfe\xf1\xfe\xf9\xaf\xdf\xff\xeb\x69\xe5\xec\xc5\x93\xb7\x6f\xfe\x50\xb9\x2f\x19\xe6\x95\x2f\x29\x3f\xa1\x8a\xb9\xb8\xf2\x33\x2a\x09\x0e\x71\x25\xc6\x61\x6c\xc7\x54\x32\x6f\x1a\xab\x9f\xba\xa5\x23\x38\x99\xcc\x4c\x48\x42\xa5\x2d\x31\x61\x49\x5c\xdf\x28\xa8\xcf\x5b\x10\xeb\x1c\x33\x65\x2b\x09\xb0\xcc\xf8\x06\x73\x8e\x38\x0b\x29\x96\x68\xcd\xd9\x58\x8b\xc7\x32\x76\x20\xbe\xbd\x12\xe3\x55\x78\xf2\x76\x94\x75\xa6\x16\xb1\xee\x8b\x13\x2a\xd1\x70\x6a\x69\x36\x36\xef\x79\x5b\xb0\x34\x23\x34\xde\xb6\xd9\x46\xd5\xe3\xc6\xf7\x6c\x1b\xed\x7c\xfd\xd3\x3d\xb4\xd3\x6e\xdb\xb6\xd9\xbe\x86\x0e\xda\x8f\x91\x2f\xa9\x77\xe9\x41\x02\x42\xd5\x8d\xe3\x6a\x80\x15\xd5\x8e\x87\xf5\x32\x47\x0a\x68\x53\x27\xd9\x8c\x25\xe5\x4d\xcb\x28\x8f\x7d\x4a\xe1\x98\x06\x94\x30\x0c\x24\x57\x52\x1a\x56\x22\x29\x7a\xd4\xd5\xd3\x4f\x4f\xd8\x35\x4d\x30\xc0\x37\xa7\xdc\xf8\x25\x89\x95\x08\x68\xe6\x9a\xdc\xf9\xd7\xb4\xcb\x35\x20\x59\x73\x63\xf6\xa5\xdf\xc2\x1a\xee\x3f\xd8\x39\xf8\x66\x77\x6f\x17\x1d\x1e\x7c\xf3\xc5\xfe\x03\x6d\x33\xfa\xfa\x01\x3a\xfa\x72\xbf\x8d\x0e\xef\x7f\xb1\x87\xb2\xc5\xbd\x86\xf5\x10\x25\x23\x9e\x40\x14\x81\x56\xb2\x38\x48\x7f\xff\xdf\x6b\x5b\xb4\x82\x4a\x0f\x50\x6c\x00\x15\x9c\x77\xb0\x9c\xa7\x7c\x42\xeb\x08\x56\x38\x0d\xe4\xe9\xc2\x67\x19\x46\x93\x8f\x0c\xf5\x53\x9c\x8c\x82\x7d\xba\x62\x50\x2c\x56\x76\x6f\xd2\xbf\x21\x93\xa0\xf8\xa8\xe6\xd5\x49\x47\x90\x41\x31\xb8\xb4\x15\xa8\x42\x87\x90\x44\xd1\x81\xc0\x3a\xf0\x8f\xb7\x22\x61\x27\x88\x91\xa6\xc5\x81\x0e\xf1\xb6\x2f\x71\x04\x0b\x9a\xe7\xd7\x39\x06\x9d\xa5\x81\xd2\x42\xa8\x18\x09\x33\x36\x97\xe3\x38\x1e\x43\xc5\xa9\x6d\x28\x6b\x6d\x4e\x3d\x95\x8b\x5f\x43\x4c\xea\xdc\x50\x94\x2b\xf4\xf4\xdc\xf6\x42\xb2\x60\x66\xe9\xa7\xe1\xd7\x90\xf1\x5f\xd3\x9a\xe4\xb2\x0d\x9d\x7d\xd3\xec\xd8\xe1\x10\xa4\x2d\xd4\xfa\x41\xd8\x89\xa3\xed\xe1\xd0\x09\xb0\x3b\x1a\x81\x1f\x6b\x06\xa2\xd4\x48\x35\x95\x4a\xa8\x61\x36\x95\x71\xc4\x64\x8f\x01\x5e\x10\x71\x6a\xe5\x33\x20\x2c\x8e\x38\x1e\xc0\x98\x72\x1e\x47\xd8\x05\x73\x9a\xd6\x9a\x85\x50\x9f\x11\xe5\x37\xad\xad\xcd\xef\x5b\x06\xaf\x84\xe6\x9f\x86\xca\x96\x6f\xc1\xbb\x8c\x41\x5e\xf2\x36\x83\x68\xed\xef\x42\x75\xe9\x5f\x81\xf1\x2b\xec\x1a\xce\xc2\x2a\x2e\x67\x4e\xeb\xd9\x2b\x22\x43\xb5\x7b\xf1\xf8\xe5\xf9\x2f\x1e\x65\xfc\xa5\x99\x09\x6b\x9e\xb7\xaf\x1e\x9f\x3f\xfe\xd3\xf9\xb3\x97\xef\x9f\xfd\xf3\x03\xb0\xf0\x7a\xd9\xc4\xb5\xe4\x12\xa7\x2d\x11\x50\x9e\x10\xea\x3b\x27\xcf\x43\x5e\xea\xe4\xcc\x69\xa0\xa2\xa1\x74\x70\x31\x07\x41\x47\xa3\x24\xb0\x16\x4a\x0d\x87\x50\x48\xc1\xa1\x74\x38\x44\xb8\x11\x14\xc7\x33\xb6\xc9\xcc\x62\xc0\x23\x2d\x38\x78\xfb\x44\x9f\x3b\x45\x66\xc8\x5f\xa5\xe7\x71\x8e\x7e\x44\x03\x88\x52\x58\x25\x92\x8e\x46\xe8\xbf\xbf\xfa\x65\x91\x67\x38\x64\x1e\x72\x0e\x28\x31\x7a\x73\xa9\x86\x8e\x00\x69\x55\xdc\x5c\xe9\xea\x00\xba\xd2\x82\xfb\x82\x14\x61\xb7\xf5\xf6\xf5\x0b\x53\x93\x99\x41\xa3\xaa\x39\x5b\x39\xe2\xfc\xcc\x28\x8f\xe9\xdc\x94\xd2\x69\xcd\xa8\x91\x94\x4c\x94\x5c\x3c\xfa\xfb\x35\x74\x84\x64\x99\x0a\xa4\x1d\xb0\x23\x29\x94\x7b\xbb\xf0\x9d\xf8\x67\xc1\x72\x96\x16\xa3\x82\x47\xaa\x2a\x4b\x12\xa6\xaf\xa3\x99\xb9\x32\x66\xb1\x35\xcd\x1d\xf9\x9e\x35\x71\xb6\xf7\x13\x9d\x4a\xd1\x01\xeb\x48\x0c\x6d\x96\x3f\x26\xd7\xb4\xc5\x77\xc6\x0f\x5e\x03\x67\x12\x64\x9a\xb0\xed\x9a\x53\xab\x39\xeb\xf3\x37\xc3\x69\x9b\x0a\x15\x2f\xea\xc5\x37\x6c\xd1\x6c\x39\xbd\xe8\x86\x0a\x36\x98\x7a\xec\x23\x39\xa3\x58\xf1\x2d\x51\x3f\x2e\xba\x3e\x96\x09\x57\x28\xf7\x2e\xf1\x0e\x2a\x14\x64\x1f\x6b\xcb\x14\x6b\xbe\xde\xb2\x92\xef\x92\xff\x17\x6e\xde\x8a\x42\xdf\x4e\xe1\x96\xee\x9e\x54\x1a\x5e\x23\xa8\xd2\xf4\x3d\xa7\x1d\x51\x97\x79\xcc\x45\x3f\x6e\x43\x14\x21\xe0\x36\x4f\x48\x74\x68\xf8\x50\x9b\x2a\x05\x35\xc5\x4d\x6f\xf5\xdc\x8a\x4b\x16\x32\xbd\x3a\x4d\x66\x03\xe6\xde\x27\x04\x0d\x44\x22\x91\xe8\x87\x08\xd2\x30\x18\x9f\x72\x81\xe9\x37\x6c\xe0\xac\xf6\xe9\xff\xb9\x3e\xac\xa7\x90\xa2\xaa\x9f\xb5\x7d\xd1\x47\x34\x54\x92\x81\x73\xa1\xd0\x4c\x2f\xee\x3e\x23\xf4\xb3\xea\x84\xef\x6e\x99\x08\x37\x09\x80\x6f\xd5\x81\x58\x4b\x06\x65\x2f\x09\x4d\x45\x5a\x5e\x1d\x4e\x67\xbc\xbb\x65\xcb\x21\x52\x44\x04\x1c\x61\xbb\x10\xd7\x41\xc8\x89\x29\xd7\xa7\x24\xa7\x23\xce\xac\x55\x07\x84\x91\x65\xf4\x59\x15\x34\xc1\x43\xc3\xf9\x14\x7a\x82\x25\x38\x15\x2b\xd4\x84\x86\xc5\xdb\xf3\x1c\x31\x55\x47\x2c\xa0\x22\x51\xcb\x4d\xd3\x0f\xf3\xca\x77\xcb\x1a\x6a\xd5\x89\xb0\x04\xdb\xca\xab\x8e\x8f\xe3\x1d\x5d\xb3\x96\x57\x30\x08\x9e\xd0\x95\xd5\x45\x92\x93\x09\xce\x88\x4b\x1a\x88\x13\x3a\x83\xb0\xc0\xc4\xa5\x00\xda\xdb\xe5\x45\x12\xa3\x05\xa4\x4a\x6d\x6d\x6d\x96\x77\x54\x24\x8c\x07\x85\x5d\xd1\xa8\x66\xf9\x0d\xaa\xf9\xec\xbf\xdb\xb4\xf3\xbf\x00\x00\x00\xff\xff\xf5\x5e\x20\xe3\xcb\x15\x00\x00")

func dtdataHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dtdataHtml,
		"dtdata.html",
	)
}

func dtdataHtml() (*asset, error) {
	bytes, err := dtdataHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dtdata.html", size: 5579, mode: os.FileMode(438), modTime: time.Unix(1497455400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rtdataHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x5a\x6d\x6f\x1b\xc7\xf1\x7f\xad\x00\xf9\x0e\x9b\xfd\xfb\x0f\x1e\x23\xf1\xce\x72\x1b\xa0\xa0\x48\x06\xae\xad\xc4\x2a\x24\xdb\x8d\x9c\x17\x45\x51\x14\xab\xbb\x25\xb9\xd4\x3d\xf9\x6e\x69\x89\x36\x04\x34\x8d\x93\xb8\x0f\xb6\xd1\xb4\x89\x81\x38\x2d\x9a\x22\x8d\xfb\x14\xdb\x40\x12\x37\x89\xed\xe4\xbb\x14\x26\x65\x7f\x8b\xce\xec\x1e\xc9\xe3\xf1\x4e\xa6\x14\xb9\x17\x58\xbc\xdb\x9d\x9d\xf9\xcd\xc3\xce\xce\xee\xa6\xd6\x96\x9e\xdb\x78\xfe\xb9\x5a\x9b\x33\x07\x7e\x09\x3c\x35\x8f\x4b\x46\xec\x36\x8b\x62\x2e\xeb\xb4\x2b\x9b\x95\x1f\xd0\x61\x9f\x14\xd2\xe5\x8d\xb3\x62\xf0\xe5\xdf\xfb\x5f\x7f\xb2\x7b\xf3\x77\x83\x6b\xb7\xfa\xef\xfe\x76\x75\xf9\xe4\xe3\x6f\x3f\xdc\xfd\xdb\x6f\xf0\xf3\xca\xbd\x9a\xa5\xe9\x92\x41\xb1\x1d\x89\x50\x92\x38\xb2\xeb\xb4\x2d\x65\x58\xb5\xac\x90\xf9\x3d\xe1\xb7\x7a\x5d\xdf\x3c\x2f\x7c\xd1\x75\x7c\xd3\x0e\x3c\xcb\x3b\x2f\xe5\x56\xfc\xbd\x45\xb3\x13\x53\x22\x7b\x21\xaf\x53\xc9\xb7\xa5\xd5\x61\x17\x98\xe6\x42\x1b\x35\x4b\xbf\xed\xc1\x7d\x8b\x6f\x38\xdc\x0b\x4c\x37\xd8\x62\xbe\x08\x64\xc2\xbb\x2b\x85\x2b\x64\x6f\x46\xe6\x73\xa4\xf6\x42\xa5\x42\x4e\x9c\x79\x6d\x99\x9c\x58\x5f\xaf\x54\x94\x40\xfc\x57\x73\x85\xbf\x49\xda\x11\x6f\xa6\x25\xda\x5e\x3c\x29\x10\x1a\x2c\x3b\x8e\x2d\x8f\x49\x1e\x09\xe6\x8a\x8b\xdc\x84\xef\x09\xd9\xea\x3b\xe2\x6e\x9d\xc6\xb2\xe7\xf2\xb8\xcd\xb9\xa4\xc4\xe3\x8e\x60\xd0\x64\x47\x9c\xfb\x0b\x61\x14\x74\xb8\x2d\x45\xe0\x6b\x37\xec\x53\xbc\x62\x7c\x38\x82\x95\x3d\xba\xb1\x0c\x3c\x9e\x98\x04\x3d\x70\x00\x4c\xb6\x62\x92\xfc\x1c\x0a\x36\xfd\x0f\xff\x4b\x70\xae\x9c\x3e\xb1\xfa\xfa\xc9\xe5\x93\xe4\xec\xea\xeb\xaf\xae\x9c\x46\xbc\xe4\xcc\x69\x72\xee\xd4\xca\x3a\x39\x7b\xfc\xd5\x65\x92\x38\x74\x1f\xc8\x3b\xb1\x15\xba\xdd\x96\xf0\xe1\x37\x12\xb1\xa7\xff\xfe\xaf\x7d\x9a\x46\xc1\xa3\x26\x70\xa9\x00\xd3\xc0\x75\x37\x58\x34\xdd\x72\x08\xe8\x94\x39\x27\x10\xa6\x20\x38\x4c\xb2\x8a\x64\x1b\xc0\x49\x79\xb6\x73\xbe\xcb\xa3\x9e\x89\xcd\xe7\x54\xab\xe9\x09\xff\x3b\x83\x50\xbe\x52\x38\x0a\x60\x24\x62\x7d\x1e\x2b\x2c\xd6\xf0\xe5\x3b\x4b\x86\xf8\xd6\x81\x52\x53\xf4\x49\xd2\xc1\x47\xf1\x27\x97\xc6\x0d\xf8\x34\x03\x1f\x8c\x0f\x33\xbd\x4a\x8e\xbd\x14\x6e\x2f\x8d\x7b\x77\x92\x74\x65\xa5\xf9\x0c\x93\x97\xcb\xfc\x56\x97\xb5\x00\x64\x2a\x19\x65\x53\xda\x54\x34\x74\x46\x7a\xa3\x8d\x21\xab\x15\xe5\xc6\x5c\xf6\x29\x55\x2e\xb0\x88\x08\x52\x27\x47\x53\x78\xb7\x84\xef\x04\x5b\x66\xe0\xbb\x01\x73\xa0\xaf\xd9\xf5\x95\x49\x88\x51\xce\x2a\x6d\xb7\xb9\xbd\x69\x94\x97\x26\x5b\x2d\xcb\x0e\xfc\x38\x00\x1f\xb8\x41\xcb\xa0\x95\xec\xd3\xb0\x29\x0e\x99\x9b\x9b\x83\x75\x66\x0d\x12\xff\xb2\x0f\xab\x46\xcf\xb8\x74\xc9\xc4\x65\x60\x67\x27\xcb\x10\xd8\xf9\xda\x2d\xe7\x82\x56\xcb\xe5\x39\x12\x09\xb0\x5a\xf1\x21\xdd\x5e\x60\xae\x41\x13\x5c\x74\x81\x2e\x1e\x85\x87\x96\xa7\xdd\xa1\x7c\x36\xd4\x2c\xa1\xcf\xaa\x77\xc4\x64\x1d\xb6\x6d\x64\x5a\xf1\xe9\x46\x6e\x95\x50\x4b\xf9\x20\x92\x18\xf3\x74\x61\x9a\x0a\xa3\xaf\x4a\x4a\x61\x10\xcb\x52\x4e\xb7\x9a\x2a\x9a\xa4\x13\x07\x7e\x1e\x09\x68\x2e\xb9\x2f\x13\x2a\x16\x86\xae\xb0\x19\x42\xb6\x70\xc4\xd2\x70\xad\x56\x4b\x75\xee\x78\x06\xaa\x55\x49\x93\xb9\x31\xcf\xe9\x66\x71\xcf\xb7\x8b\xbb\xe3\xae\x6d\xf3\x38\xae\xa6\x42\x00\x31\x4f\xd9\x69\x64\x2f\x83\xfe\x1f\x4e\xa8\xae\x47\xcb\x26\xf7\x42\xf0\x69\xd6\x53\xc3\x47\x34\x35\x2f\xf2\x42\x9d\xf8\x5d\xd7\x2d\xe4\xa9\x88\x31\x42\x8b\xbb\x2d\xab\xff\xcd\x3f\x76\xaf\xdd\x79\xf2\xc6\xd5\xfe\xb5\xb7\xd1\x30\x83\xf7\xee\xee\xde\xbf\x3c\xf8\xf3\x83\xfe\x83\xeb\xbb\x1f\x5c\x86\xcf\xc1\xd5\xdb\xc5\x0c\x70\x16\xc4\x32\x02\x29\x94\xea\xc0\x84\x27\x1d\xc3\x88\xd4\x74\xb9\xdf\x92\xed\x72\x21\x41\x91\xaa\xca\x32\x26\x07\x4f\x28\xb2\x85\x94\x35\x61\xa6\xf1\xed\x05\x22\x24\xf7\xf6\x34\xc0\xd0\x62\x82\xd4\x48\x1a\xcb\xd3\xc6\xe0\x83\x8a\xcd\x83\x66\x35\x19\x35\x6a\xd2\x01\xa7\xbb\xa2\xe5\xd7\x4b\x36\xc7\xe9\x52\x22\xc2\xa9\x97\x3c\x66\x53\x32\x0f\x76\x9e\x27\xb4\xd4\x50\xaf\x00\xc9\x84\x66\x6c\x81\xa2\xce\x69\xd0\x3d\xb4\x9b\x16\x95\x2f\x06\x78\xc2\x32\xc5\x64\x37\xe2\x79\xe2\x52\xdd\xd8\x43\xfe\x73\xf9\xcd\x91\xe8\xb9\xe4\x19\xbf\x29\x7b\xe0\x30\x97\x43\x96\xaa\x13\x19\x75\xf9\x4c\x06\x99\x40\x8a\xfc\xf3\xe0\xaa\x5c\x0d\x9f\x81\x1b\x44\xd5\x16\x2e\x0e\x4b\x2a\xc3\x6f\x71\xd1\x6a\xcb\xea\x46\xe0\x3a\x5a\x27\x90\x9e\xd2\xe5\xd1\xd7\xb7\x67\xb6\xd6\x0e\xe1\x30\xed\x9e\x0d\xe2\x88\x3b\x33\xe1\xdd\x7d\xe3\xd3\x7d\xe0\xcd\x73\x43\x82\x6b\x0f\xa7\x0b\x6f\xc2\xdb\xb3\xa8\x8b\x13\x12\xc7\xe9\x49\xe9\xf3\x2d\x72\x12\x4a\x69\xed\x6e\x58\xa9\xe1\xfd\xe7\x30\x0d\x78\xd9\x7c\x25\x88\xa0\xc8\x36\x68\x0f\x1e\x6b\x6d\xcd\x72\x1c\xd2\x6e\x57\x3d\xaf\x0a\x8b\xfd\x5e\xf3\x31\x63\xd5\x44\x56\x6e\x9c\x1d\x20\x54\xb4\xe2\x41\xc8\xfd\x94\xe2\x83\x5f\xfd\xbe\xff\xe0\x17\x53\x01\x7d\x60\xf6\xb6\x1b\xc4\x69\xc3\xf6\xdf\xfa\xec\xc9\x8d\x4f\x73\x26\xcc\xbe\x23\x6b\x12\x40\xa3\xc6\x74\xd5\x55\x72\xd4\x42\xf7\x32\x64\x85\x7a\x36\x45\x94\x1a\x8f\xef\x7c\x32\x78\xf3\xad\x9a\xc5\x1a\x9a\x8f\x05\xe9\x66\x06\x5f\x8b\xf9\xf9\xa7\xb8\x69\xa7\xb8\x7b\xaa\x50\x48\x3f\x96\xc5\x5c\x1e\x49\x03\xd4\xdb\x33\x33\xa7\xd7\x2c\xdc\x14\xef\x35\xa0\x00\xcb\xd3\xe6\xb1\x06\x42\x79\x14\x05\x51\x61\x58\xe6\xf0\xde\xc9\xac\xc9\x3b\x05\x75\x8c\xa5\xb6\xcf\xa4\x7f\xe5\xdf\x83\xf7\xef\x3e\xf9\xe8\x8b\x27\x7f\xfc\x0b\xae\x7a\xef\x7f\x35\xf8\xec\xbd\x31\x15\x4e\x21\x13\x2a\x5c\x19\x60\x5d\x92\x4c\x9d\x89\xfa\xae\xe9\x49\xc8\xa0\x68\xb9\xae\x6c\x43\xb4\x41\x75\x2c\x2e\x5e\x24\x93\x20\x70\x6e\x06\x30\x2c\x47\x5f\xba\x36\x4f\xab\x44\xb6\x45\x6c\xb6\xa0\xb2\x83\xfc\xd3\x86\xa2\x6a\x9e\x2c\x2e\x00\xcf\xc1\x87\x57\x1e\xdd\x7f\x98\x33\xc8\x49\x0f\x52\xf3\xbc\xac\xe8\x6f\xfc\x35\x87\xb8\x9d\x26\x3e\x15\x74\xa3\x58\x53\xf7\xef\x5e\x1f\xdc\xb8\x97\x33\xc0\x9b\x80\x24\xfc\xae\xe4\xc3\x21\x57\xde\xce\xa1\x8f\xd3\xf4\xeb\x1c\x16\x79\x27\xa1\xdf\xbd\xf5\x6e\x0e\xfd\xfa\x04\x7b\xd7\x15\xf1\x70\x0c\xea\x70\xe7\x9f\x53\xa3\x76\x32\xfe\xc7\x75\xcc\x32\x7a\xf3\x65\x0b\x16\xc0\x58\x2a\x27\x94\x09\xfc\x45\xd7\x78\xd2\x8c\x78\xe8\x32\x9b\x1b\xaf\xf1\xd6\xf2\x76\x68\x1e\x01\x63\x1a\x43\x81\xaf\x40\xe5\xf4\x13\xce\x22\x65\x65\x0a\x01\x1c\x77\x37\x20\x7c\x8d\xef\x93\x0a\x19\xd1\x0f\x8b\x85\xfc\xc0\x6b\x06\x11\x31\xd0\xa7\x9b\x44\xf8\x24\x28\x4f\xd3\x20\x40\x4c\xc1\x9a\xa1\x41\x0d\x9c\xfc\x9b\x28\xb0\x0c\x12\x67\xc6\x9c\xc5\x83\x6b\xf6\x62\x99\xbc\x4c\x8c\xe0\xa7\x9b\x3f\x2b\x93\x2a\x31\x0c\x0a\xb5\x3a\x30\x56\x0d\x43\x5d\x0c\x3a\x6e\x1a\x6a\x92\x55\x25\xe2\x50\x34\xf8\x28\x7a\x72\x82\xe4\x94\xfa\x91\xec\x86\xb8\x76\x18\x6e\x60\x33\x5d\x76\xce\xcd\x8d\x8c\xd0\x51\x7b\x21\xf8\xa9\x11\x01\x3f\xf3\xf3\xb9\x15\x05\x5a\x44\x0d\x57\xe9\x0f\xf4\x70\x02\xbb\xeb\x41\xba\x44\x9f\x2c\xbb\x1c\x5f\x7f\xd8\x5b\x71\x0c\x9a\x14\x56\x9d\xb2\x29\x60\x0b\x13\x9d\x3a\xb7\xb6\x9a\x88\x1c\xaf\x31\x85\x83\x33\xe5\x52\x9a\x09\xc0\xd4\x00\x26\x6b\xa6\x12\xd6\x4c\xa5\xa5\x11\xff\x69\x77\xa7\xc1\xcf\x5a\x38\x15\x02\x4c\x6a\x89\x0c\x30\x0a\x45\xd0\x5e\xf5\xc4\x0c\xec\x92\x93\x2b\x5c\xf2\x90\xa1\x5a\xf5\x8a\x58\x1e\x30\x27\xef\x57\x29\xa8\x94\x0e\x57\x29\x28\xd1\xf6\xa7\x52\x3e\x6d\x7e\xeb\xb0\x80\x3a\x96\x2e\x9f\x0e\x56\x2e\x15\x87\x67\x52\xd8\x65\x2c\xa5\xc4\x16\xf0\xda\x80\xda\x6d\x33\xa7\x2f\xa3\xf0\x4e\x66\x12\x5b\x2f\x3e\xfe\xf6\x0f\xfd\x9b\x7f\x7a\xf4\xe5\xaf\x07\xff\xfa\x68\xf0\xc5\xf5\xc7\xb7\xae\x3c\x7a\x78\x75\xf7\xe1\xed\x17\xad\xe7\x9f\x3b\x62\x64\x4e\x28\xc6\xdb\xb9\xe4\x28\x03\xc3\x1d\xfb\x4d\xac\x63\x40\xbc\xee\x84\xbf\x49\x8e\x11\x7e\x0b\x57\x7d\xd3\x65\xb1\x5c\xc1\x2d\xd9\x99\xa6\x41\x2d\xaa\x96\x2e\x34\x0b\x4e\x99\x23\xe0\xb9\x60\x53\x70\x55\x1e\x28\x31\x28\x99\x62\xc5\xb0\xb0\x11\x38\x3d\x48\x85\xcc\x17\x78\xe2\x6b\x5c\x22\xfa\x10\xee\x5c\x10\x56\xc9\xc4\x38\x58\xd1\x09\x9e\x48\x20\x53\xd0\x6c\x18\xa3\xf0\xba\x53\xd6\x0c\x35\x62\x08\x16\xc5\x61\x52\x33\xf2\x0c\x54\x53\x81\x12\x84\x30\xe6\x88\x31\xf4\xf4\x50\x3a\xe0\x57\xfb\xf7\xb4\x0a\x0b\x48\xbd\x00\x58\x42\x26\xdb\x55\x52\xb2\x4a\xba\x2a\x49\x32\xf0\x84\xb6\x4b\x5a\xad\xbd\xbd\x87\x4e\x4e\x1d\x5e\xd5\xac\xe4\x42\xa2\x86\x46\x6d\x4c\x1c\xec\xae\x4b\x16\x49\x72\x96\xb5\x38\x59\x0d\x98\x03\xaa\x8d\x8e\x72\x1d\x71\x01\x8b\x62\x8a\x47\x56\x3c\xaa\x6c\x45\x2c\x84\xb4\x38\x3e\xe9\xca\x10\xe0\x79\x19\xb4\x34\xb2\x93\x48\x91\xd9\x60\xab\x78\xc4\x2a\xd6\x07\x4f\x24\xf9\xad\xb8\xbc\x29\x87\xc3\xf7\x31\x2c\xc2\x6d\x58\x7a\x5c\xea\x0d\x75\x5b\xf6\x9d\x1c\xcd\x6a\xfa\xa8\x71\x4b\x38\xb2\x5d\xc7\xb3\xac\xff\xa7\x49\x75\x4e\x75\x75\x3e\xbe\x9e\x89\x52\xa7\x7a\xe3\x22\x7e\x44\x56\x6b\x2f\x26\x3b\x09\x3a\x3e\xa9\x7c\xe9\x68\xb8\xbd\xa4\x37\x16\x1b\xb0\x5e\x6f\x66\x99\x0f\x05\x1f\x3b\x0a\x84\x74\x86\xcb\x9f\xf6\xa2\xae\xfe\x87\x6e\x55\xa8\xd0\xa9\x4a\x8f\xc4\x9b\xb5\xb1\xe9\x12\xfd\x12\xd3\x61\xb8\x86\xb0\x26\xe1\x0d\xce\x22\x9d\xd0\x27\x75\x4b\x35\xad\x6e\x42\xd2\x78\x7c\xfb\x9b\xfe\xc7\xef\xac\x1d\x3f\x01\xf2\xda\x39\xfd\x1a\x7d\x41\x27\xe8\xa2\x7a\x48\x36\xa5\xaa\x91\x37\xee\x3d\xb9\xf1\x79\xc1\xc8\xdd\x5f\x7e\xd5\x7f\xe7\xbe\xde\xde\x0d\xb9\x14\x51\xe9\x4d\x5a\x31\xd5\xe0\xe6\xe7\xfd\x8f\x3f\xc8\x74\x26\x76\x4c\x7d\x4e\x99\x03\x27\x8b\x8a\xef\x64\x2b\x33\x49\x9e\x4c\xa5\xe4\x2b\x71\x45\x26\x00\x3b\x3f\xc6\xb3\x4c\xb2\x2a\x36\x22\x06\xbf\xc9\xc4\x1a\x9f\x24\xe7\x5f\x9b\x3d\xf5\xa4\x3a\x73\x6f\xa1\x4f\xad\x2b\x8b\xe6\xe2\xa2\x79\x6c\xfa\xf0\x9a\x8c\xac\x8f\x98\x52\xd7\x67\xa4\x13\x1f\x32\xa2\xf4\xdd\x5c\xde\x01\x3a\xc8\x57\x97\x3c\xcf\xc8\x10\xe9\x6b\xa4\x02\xf1\xa3\x9b\x9c\x67\x05\x61\x86\x3b\xa4\xa2\xeb\x05\x8c\x98\xd4\x05\xd0\xb3\x0a\x97\xf4\x1d\x53\xa7\xe8\x8a\x69\x8f\xeb\x8f\xc3\x47\x91\x7a\xaf\x68\x76\x85\xd1\xa3\x47\x43\x37\x6c\xc6\xd6\xf1\xe2\x74\x3d\xe4\xb6\x68\x0a\x9b\xfc\x68\x9d\xd8\x81\x03\x66\xc3\x7d\xc7\x59\x45\x47\xd6\xb9\x94\x90\xf7\x0f\x3b\xcc\xc7\x28\x72\x41\xea\x7b\xd8\xb1\x26\x00\xf5\x38\x14\x85\x3d\xd8\x58\x93\x60\xcb\x87\x9d\x2d\x14\x7c\x44\x53\x01\xec\x43\x06\x97\x95\x7e\x20\x3f\xa6\x02\x43\xd7\x1e\x99\x94\x82\x99\x2e\x49\x80\xb0\x40\xe1\xff\xf5\xf0\xdf\x00\x00\x00\xff\xff\xdc\xcd\x5f\xfa\xfc\x20\x00\x00")

func rtdataHtmlBytes() ([]byte, error) {
	return bindataRead(
		_rtdataHtml,
		"rtdata.html",
	)
}

func rtdataHtml() (*asset, error) {
	bytes, err := rtdataHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rtdata.html", size: 8444, mode: os.FileMode(438), modTime: time.Unix(1497456417, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dtdata.html": dtdataHtml,
	"rtdata.html": rtdataHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dtdata.html": &bintree{dtdataHtml, map[string]*bintree{}},
	"rtdata.html": &bintree{rtdataHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

